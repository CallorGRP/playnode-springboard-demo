//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./springboard_types');
//HELPER FUNCTIONS AND STRUCTURES

Springboard_createComment_args = function(args) {
  this.arg0 = null;
  if (args) {
    if (args.arg0 !== undefined && args.arg0 !== null) {
      this.arg0 = new ttypes.Comment(args.arg0);
    }
  }
};
Springboard_createComment_args.prototype = {};
Springboard_createComment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.arg0 = new ttypes.Comment();
        this.arg0.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_createComment_args.prototype.write = function(output) {
  output.writeStructBegin('Springboard_createComment_args');
  if (this.arg0 !== null && this.arg0 !== undefined) {
    output.writeFieldBegin('arg0', Thrift.Type.STRUCT, 1);
    this.arg0.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_createComment_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Springboard_createComment_result.prototype = {};
Springboard_createComment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_createComment_result.prototype.write = function(output) {
  output.writeStructBegin('Springboard_createComment_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_createForum_args = function(args) {
  this.arg0 = null;
  if (args) {
    if (args.arg0 !== undefined && args.arg0 !== null) {
      this.arg0 = new ttypes.Forum(args.arg0);
    }
  }
};
Springboard_createForum_args.prototype = {};
Springboard_createForum_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.arg0 = new ttypes.Forum();
        this.arg0.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_createForum_args.prototype.write = function(output) {
  output.writeStructBegin('Springboard_createForum_args');
  if (this.arg0 !== null && this.arg0 !== undefined) {
    output.writeFieldBegin('arg0', Thrift.Type.STRUCT, 1);
    this.arg0.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_createForum_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Springboard_createForum_result.prototype = {};
Springboard_createForum_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_createForum_result.prototype.write = function(output) {
  output.writeStructBegin('Springboard_createForum_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_createPost_args = function(args) {
  this.arg0 = null;
  if (args) {
    if (args.arg0 !== undefined && args.arg0 !== null) {
      this.arg0 = new ttypes.Post(args.arg0);
    }
  }
};
Springboard_createPost_args.prototype = {};
Springboard_createPost_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.arg0 = new ttypes.Post();
        this.arg0.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_createPost_args.prototype.write = function(output) {
  output.writeStructBegin('Springboard_createPost_args');
  if (this.arg0 !== null && this.arg0 !== undefined) {
    output.writeFieldBegin('arg0', Thrift.Type.STRUCT, 1);
    this.arg0.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_createPost_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Springboard_createPost_result.prototype = {};
Springboard_createPost_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_createPost_result.prototype.write = function(output) {
  output.writeStructBegin('Springboard_createPost_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_createUser_args = function(args) {
  this.arg0 = null;
  if (args) {
    if (args.arg0 !== undefined && args.arg0 !== null) {
      this.arg0 = new ttypes.User(args.arg0);
    }
  }
};
Springboard_createUser_args.prototype = {};
Springboard_createUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.arg0 = new ttypes.User();
        this.arg0.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_createUser_args.prototype.write = function(output) {
  output.writeStructBegin('Springboard_createUser_args');
  if (this.arg0 !== null && this.arg0 !== undefined) {
    output.writeFieldBegin('arg0', Thrift.Type.STRUCT, 1);
    this.arg0.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_createUser_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Springboard_createUser_result.prototype = {};
Springboard_createUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_createUser_result.prototype.write = function(output) {
  output.writeStructBegin('Springboard_createUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_deleteComment_args = function(args) {
  this.arg0 = null;
  if (args) {
    if (args.arg0 !== undefined && args.arg0 !== null) {
      this.arg0 = args.arg0;
    }
  }
};
Springboard_deleteComment_args.prototype = {};
Springboard_deleteComment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.arg0 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_deleteComment_args.prototype.write = function(output) {
  output.writeStructBegin('Springboard_deleteComment_args');
  if (this.arg0 !== null && this.arg0 !== undefined) {
    output.writeFieldBegin('arg0', Thrift.Type.I32, 1);
    output.writeI32(this.arg0);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_deleteComment_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Springboard_deleteComment_result.prototype = {};
Springboard_deleteComment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_deleteComment_result.prototype.write = function(output) {
  output.writeStructBegin('Springboard_deleteComment_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_deleteForum_args = function(args) {
  this.arg0 = null;
  if (args) {
    if (args.arg0 !== undefined && args.arg0 !== null) {
      this.arg0 = args.arg0;
    }
  }
};
Springboard_deleteForum_args.prototype = {};
Springboard_deleteForum_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.arg0 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_deleteForum_args.prototype.write = function(output) {
  output.writeStructBegin('Springboard_deleteForum_args');
  if (this.arg0 !== null && this.arg0 !== undefined) {
    output.writeFieldBegin('arg0', Thrift.Type.I32, 1);
    output.writeI32(this.arg0);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_deleteForum_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Springboard_deleteForum_result.prototype = {};
Springboard_deleteForum_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_deleteForum_result.prototype.write = function(output) {
  output.writeStructBegin('Springboard_deleteForum_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_deletePost_args = function(args) {
  this.arg0 = null;
  if (args) {
    if (args.arg0 !== undefined && args.arg0 !== null) {
      this.arg0 = args.arg0;
    }
  }
};
Springboard_deletePost_args.prototype = {};
Springboard_deletePost_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.arg0 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_deletePost_args.prototype.write = function(output) {
  output.writeStructBegin('Springboard_deletePost_args');
  if (this.arg0 !== null && this.arg0 !== undefined) {
    output.writeFieldBegin('arg0', Thrift.Type.I32, 1);
    output.writeI32(this.arg0);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_deletePost_result = function(args) {
};
Springboard_deletePost_result.prototype = {};
Springboard_deletePost_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_deletePost_result.prototype.write = function(output) {
  output.writeStructBegin('Springboard_deletePost_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_deleteUser_args = function(args) {
  this.arg0 = null;
  if (args) {
    if (args.arg0 !== undefined && args.arg0 !== null) {
      this.arg0 = args.arg0;
    }
  }
};
Springboard_deleteUser_args.prototype = {};
Springboard_deleteUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.arg0 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_deleteUser_args.prototype.write = function(output) {
  output.writeStructBegin('Springboard_deleteUser_args');
  if (this.arg0 !== null && this.arg0 !== undefined) {
    output.writeFieldBegin('arg0', Thrift.Type.I32, 1);
    output.writeI32(this.arg0);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_deleteUser_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Springboard_deleteUser_result.prototype = {};
Springboard_deleteUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_deleteUser_result.prototype.write = function(output) {
  output.writeStructBegin('Springboard_deleteUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_getComment_args = function(args) {
  this.arg0 = null;
  if (args) {
    if (args.arg0 !== undefined && args.arg0 !== null) {
      this.arg0 = args.arg0;
    }
  }
};
Springboard_getComment_args.prototype = {};
Springboard_getComment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.arg0 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_getComment_args.prototype.write = function(output) {
  output.writeStructBegin('Springboard_getComment_args');
  if (this.arg0 !== null && this.arg0 !== undefined) {
    output.writeFieldBegin('arg0', Thrift.Type.I32, 1);
    output.writeI32(this.arg0);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_getComment_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Comment(args.success);
    }
  }
};
Springboard_getComment_result.prototype = {};
Springboard_getComment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Comment();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_getComment_result.prototype.write = function(output) {
  output.writeStructBegin('Springboard_getComment_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_getComments_args = function(args) {
  this.arg0 = null;
  if (args) {
    if (args.arg0 !== undefined && args.arg0 !== null) {
      this.arg0 = args.arg0;
    }
  }
};
Springboard_getComments_args.prototype = {};
Springboard_getComments_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.arg0 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_getComments_args.prototype.write = function(output) {
  output.writeStructBegin('Springboard_getComments_args');
  if (this.arg0 !== null && this.arg0 !== undefined) {
    output.writeFieldBegin('arg0', Thrift.Type.I32, 1);
    output.writeI32(this.arg0);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_getComments_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Comment]);
    }
  }
};
Springboard_getComments_result.prototype = {};
Springboard_getComments_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.success = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.Comment();
          elem6.read(input);
          this.success.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_getComments_result.prototype.write = function(output) {
  output.writeStructBegin('Springboard_getComments_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter7 in this.success)
    {
      if (this.success.hasOwnProperty(iter7))
      {
        iter7 = this.success[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_getForum_args = function(args) {
  this.arg0 = null;
  if (args) {
    if (args.arg0 !== undefined && args.arg0 !== null) {
      this.arg0 = args.arg0;
    }
  }
};
Springboard_getForum_args.prototype = {};
Springboard_getForum_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.arg0 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_getForum_args.prototype.write = function(output) {
  output.writeStructBegin('Springboard_getForum_args');
  if (this.arg0 !== null && this.arg0 !== undefined) {
    output.writeFieldBegin('arg0', Thrift.Type.I32, 1);
    output.writeI32(this.arg0);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_getForum_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Forum(args.success);
    }
  }
};
Springboard_getForum_result.prototype = {};
Springboard_getForum_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Forum();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_getForum_result.prototype.write = function(output) {
  output.writeStructBegin('Springboard_getForum_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_getForums_args = function(args) {
};
Springboard_getForums_args.prototype = {};
Springboard_getForums_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_getForums_args.prototype.write = function(output) {
  output.writeStructBegin('Springboard_getForums_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_getForums_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Forum]);
    }
  }
};
Springboard_getForums_result.prototype = {};
Springboard_getForums_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.success = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.Forum();
          elem14.read(input);
          this.success.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_getForums_result.prototype.write = function(output) {
  output.writeStructBegin('Springboard_getForums_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter15 in this.success)
    {
      if (this.success.hasOwnProperty(iter15))
      {
        iter15 = this.success[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_getPost_args = function(args) {
  this.arg0 = null;
  if (args) {
    if (args.arg0 !== undefined && args.arg0 !== null) {
      this.arg0 = args.arg0;
    }
  }
};
Springboard_getPost_args.prototype = {};
Springboard_getPost_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.arg0 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_getPost_args.prototype.write = function(output) {
  output.writeStructBegin('Springboard_getPost_args');
  if (this.arg0 !== null && this.arg0 !== undefined) {
    output.writeFieldBegin('arg0', Thrift.Type.I32, 1);
    output.writeI32(this.arg0);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_getPost_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Post(args.success);
    }
  }
};
Springboard_getPost_result.prototype = {};
Springboard_getPost_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Post();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_getPost_result.prototype.write = function(output) {
  output.writeStructBegin('Springboard_getPost_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_getPosts_args = function(args) {
  this.arg0 = null;
  if (args) {
    if (args.arg0 !== undefined && args.arg0 !== null) {
      this.arg0 = args.arg0;
    }
  }
};
Springboard_getPosts_args.prototype = {};
Springboard_getPosts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.arg0 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_getPosts_args.prototype.write = function(output) {
  output.writeStructBegin('Springboard_getPosts_args');
  if (this.arg0 !== null && this.arg0 !== undefined) {
    output.writeFieldBegin('arg0', Thrift.Type.I32, 1);
    output.writeI32(this.arg0);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_getPosts_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Post]);
    }
  }
};
Springboard_getPosts_result.prototype = {};
Springboard_getPosts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.success = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.Post();
          elem22.read(input);
          this.success.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_getPosts_result.prototype.write = function(output) {
  output.writeStructBegin('Springboard_getPosts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter23 in this.success)
    {
      if (this.success.hasOwnProperty(iter23))
      {
        iter23 = this.success[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_getUser_args = function(args) {
  this.arg0 = null;
  if (args) {
    if (args.arg0 !== undefined && args.arg0 !== null) {
      this.arg0 = args.arg0;
    }
  }
};
Springboard_getUser_args.prototype = {};
Springboard_getUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.arg0 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_getUser_args.prototype.write = function(output) {
  output.writeStructBegin('Springboard_getUser_args');
  if (this.arg0 !== null && this.arg0 !== undefined) {
    output.writeFieldBegin('arg0', Thrift.Type.I32, 1);
    output.writeI32(this.arg0);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_getUser_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.User(args.success);
    }
  }
};
Springboard_getUser_result.prototype = {};
Springboard_getUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.User();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_getUser_result.prototype.write = function(output) {
  output.writeStructBegin('Springboard_getUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_getUserByUsernameAndPassword_args = function(args) {
  this.arg0 = null;
  this.arg1 = null;
  if (args) {
    if (args.arg0 !== undefined && args.arg0 !== null) {
      this.arg0 = args.arg0;
    }
    if (args.arg1 !== undefined && args.arg1 !== null) {
      this.arg1 = args.arg1;
    }
  }
};
Springboard_getUserByUsernameAndPassword_args.prototype = {};
Springboard_getUserByUsernameAndPassword_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.arg0 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.arg1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_getUserByUsernameAndPassword_args.prototype.write = function(output) {
  output.writeStructBegin('Springboard_getUserByUsernameAndPassword_args');
  if (this.arg0 !== null && this.arg0 !== undefined) {
    output.writeFieldBegin('arg0', Thrift.Type.STRING, 1);
    output.writeString(this.arg0);
    output.writeFieldEnd();
  }
  if (this.arg1 !== null && this.arg1 !== undefined) {
    output.writeFieldBegin('arg1', Thrift.Type.STRING, 2);
    output.writeString(this.arg1);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_getUserByUsernameAndPassword_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.User(args.success);
    }
  }
};
Springboard_getUserByUsernameAndPassword_result.prototype = {};
Springboard_getUserByUsernameAndPassword_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.User();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_getUserByUsernameAndPassword_result.prototype.write = function(output) {
  output.writeStructBegin('Springboard_getUserByUsernameAndPassword_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_getUsers_args = function(args) {
};
Springboard_getUsers_args.prototype = {};
Springboard_getUsers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_getUsers_args.prototype.write = function(output) {
  output.writeStructBegin('Springboard_getUsers_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_getUsers_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.User]);
    }
  }
};
Springboard_getUsers_result.prototype = {};
Springboard_getUsers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.success = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new ttypes.User();
          elem30.read(input);
          this.success.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_getUsers_result.prototype.write = function(output) {
  output.writeStructBegin('Springboard_getUsers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter31 in this.success)
    {
      if (this.success.hasOwnProperty(iter31))
      {
        iter31 = this.success[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_updateComment_args = function(args) {
  this.arg0 = null;
  if (args) {
    if (args.arg0 !== undefined && args.arg0 !== null) {
      this.arg0 = new ttypes.Comment(args.arg0);
    }
  }
};
Springboard_updateComment_args.prototype = {};
Springboard_updateComment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.arg0 = new ttypes.Comment();
        this.arg0.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_updateComment_args.prototype.write = function(output) {
  output.writeStructBegin('Springboard_updateComment_args');
  if (this.arg0 !== null && this.arg0 !== undefined) {
    output.writeFieldBegin('arg0', Thrift.Type.STRUCT, 1);
    this.arg0.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_updateComment_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Springboard_updateComment_result.prototype = {};
Springboard_updateComment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_updateComment_result.prototype.write = function(output) {
  output.writeStructBegin('Springboard_updateComment_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_updateForum_args = function(args) {
  this.arg0 = null;
  if (args) {
    if (args.arg0 !== undefined && args.arg0 !== null) {
      this.arg0 = new ttypes.Forum(args.arg0);
    }
  }
};
Springboard_updateForum_args.prototype = {};
Springboard_updateForum_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.arg0 = new ttypes.Forum();
        this.arg0.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_updateForum_args.prototype.write = function(output) {
  output.writeStructBegin('Springboard_updateForum_args');
  if (this.arg0 !== null && this.arg0 !== undefined) {
    output.writeFieldBegin('arg0', Thrift.Type.STRUCT, 1);
    this.arg0.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_updateForum_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Springboard_updateForum_result.prototype = {};
Springboard_updateForum_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_updateForum_result.prototype.write = function(output) {
  output.writeStructBegin('Springboard_updateForum_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_updatePost_args = function(args) {
  this.arg0 = null;
  if (args) {
    if (args.arg0 !== undefined && args.arg0 !== null) {
      this.arg0 = new ttypes.Post(args.arg0);
    }
  }
};
Springboard_updatePost_args.prototype = {};
Springboard_updatePost_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.arg0 = new ttypes.Post();
        this.arg0.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_updatePost_args.prototype.write = function(output) {
  output.writeStructBegin('Springboard_updatePost_args');
  if (this.arg0 !== null && this.arg0 !== undefined) {
    output.writeFieldBegin('arg0', Thrift.Type.STRUCT, 1);
    this.arg0.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_updatePost_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Springboard_updatePost_result.prototype = {};
Springboard_updatePost_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_updatePost_result.prototype.write = function(output) {
  output.writeStructBegin('Springboard_updatePost_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_updateUser_args = function(args) {
  this.arg0 = null;
  if (args) {
    if (args.arg0 !== undefined && args.arg0 !== null) {
      this.arg0 = new ttypes.User(args.arg0);
    }
  }
};
Springboard_updateUser_args.prototype = {};
Springboard_updateUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.arg0 = new ttypes.User();
        this.arg0.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_updateUser_args.prototype.write = function(output) {
  output.writeStructBegin('Springboard_updateUser_args');
  if (this.arg0 !== null && this.arg0 !== undefined) {
    output.writeFieldBegin('arg0', Thrift.Type.STRUCT, 1);
    this.arg0.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Springboard_updateUser_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Springboard_updateUser_result.prototype = {};
Springboard_updateUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Springboard_updateUser_result.prototype.write = function(output) {
  output.writeStructBegin('Springboard_updateUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SpringboardClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
SpringboardClient.prototype = {};
SpringboardClient.prototype.seqid = function() { return this._seqid; }
SpringboardClient.prototype.new_seqid = function() { return this._seqid += 1; }
SpringboardClient.prototype.createComment = function(arg0, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createComment(arg0);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createComment(arg0);
  }
};

SpringboardClient.prototype.send_createComment = function(arg0) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createComment', Thrift.MessageType.CALL, this.seqid());
  var args = new Springboard_createComment_args();
  args.arg0 = arg0;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SpringboardClient.prototype.recv_createComment = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Springboard_createComment_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createComment failed: unknown result');
};
SpringboardClient.prototype.createForum = function(arg0, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createForum(arg0);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createForum(arg0);
  }
};

SpringboardClient.prototype.send_createForum = function(arg0) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createForum', Thrift.MessageType.CALL, this.seqid());
  var args = new Springboard_createForum_args();
  args.arg0 = arg0;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SpringboardClient.prototype.recv_createForum = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Springboard_createForum_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createForum failed: unknown result');
};
SpringboardClient.prototype.createPost = function(arg0, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createPost(arg0);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createPost(arg0);
  }
};

SpringboardClient.prototype.send_createPost = function(arg0) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createPost', Thrift.MessageType.CALL, this.seqid());
  var args = new Springboard_createPost_args();
  args.arg0 = arg0;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SpringboardClient.prototype.recv_createPost = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Springboard_createPost_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createPost failed: unknown result');
};
SpringboardClient.prototype.createUser = function(arg0, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createUser(arg0);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createUser(arg0);
  }
};

SpringboardClient.prototype.send_createUser = function(arg0) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createUser', Thrift.MessageType.CALL, this.seqid());
  var args = new Springboard_createUser_args();
  args.arg0 = arg0;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SpringboardClient.prototype.recv_createUser = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Springboard_createUser_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createUser failed: unknown result');
};
SpringboardClient.prototype.deleteComment = function(arg0, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteComment(arg0);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteComment(arg0);
  }
};

SpringboardClient.prototype.send_deleteComment = function(arg0) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteComment', Thrift.MessageType.CALL, this.seqid());
  var args = new Springboard_deleteComment_args();
  args.arg0 = arg0;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SpringboardClient.prototype.recv_deleteComment = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Springboard_deleteComment_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteComment failed: unknown result');
};
SpringboardClient.prototype.deleteForum = function(arg0, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteForum(arg0);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteForum(arg0);
  }
};

SpringboardClient.prototype.send_deleteForum = function(arg0) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteForum', Thrift.MessageType.CALL, this.seqid());
  var args = new Springboard_deleteForum_args();
  args.arg0 = arg0;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SpringboardClient.prototype.recv_deleteForum = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Springboard_deleteForum_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteForum failed: unknown result');
};
SpringboardClient.prototype.deletePost = function(arg0, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deletePost(arg0);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deletePost(arg0);
  }
};

SpringboardClient.prototype.send_deletePost = function(arg0) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deletePost', Thrift.MessageType.CALL, this.seqid());
  var args = new Springboard_deletePost_args();
  args.arg0 = arg0;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SpringboardClient.prototype.recv_deletePost = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Springboard_deletePost_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
SpringboardClient.prototype.deleteUser = function(arg0, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteUser(arg0);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteUser(arg0);
  }
};

SpringboardClient.prototype.send_deleteUser = function(arg0) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteUser', Thrift.MessageType.CALL, this.seqid());
  var args = new Springboard_deleteUser_args();
  args.arg0 = arg0;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SpringboardClient.prototype.recv_deleteUser = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Springboard_deleteUser_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteUser failed: unknown result');
};
SpringboardClient.prototype.getComment = function(arg0, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getComment(arg0);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getComment(arg0);
  }
};

SpringboardClient.prototype.send_getComment = function(arg0) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getComment', Thrift.MessageType.CALL, this.seqid());
  var args = new Springboard_getComment_args();
  args.arg0 = arg0;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SpringboardClient.prototype.recv_getComment = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Springboard_getComment_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getComment failed: unknown result');
};
SpringboardClient.prototype.getComments = function(arg0, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getComments(arg0);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getComments(arg0);
  }
};

SpringboardClient.prototype.send_getComments = function(arg0) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getComments', Thrift.MessageType.CALL, this.seqid());
  var args = new Springboard_getComments_args();
  args.arg0 = arg0;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SpringboardClient.prototype.recv_getComments = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Springboard_getComments_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getComments failed: unknown result');
};
SpringboardClient.prototype.getForum = function(arg0, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getForum(arg0);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getForum(arg0);
  }
};

SpringboardClient.prototype.send_getForum = function(arg0) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getForum', Thrift.MessageType.CALL, this.seqid());
  var args = new Springboard_getForum_args();
  args.arg0 = arg0;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SpringboardClient.prototype.recv_getForum = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Springboard_getForum_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getForum failed: unknown result');
};
SpringboardClient.prototype.getForums = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getForums();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getForums();
  }
};

SpringboardClient.prototype.send_getForums = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getForums', Thrift.MessageType.CALL, this.seqid());
  var args = new Springboard_getForums_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SpringboardClient.prototype.recv_getForums = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Springboard_getForums_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getForums failed: unknown result');
};
SpringboardClient.prototype.getPost = function(arg0, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPost(arg0);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPost(arg0);
  }
};

SpringboardClient.prototype.send_getPost = function(arg0) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPost', Thrift.MessageType.CALL, this.seqid());
  var args = new Springboard_getPost_args();
  args.arg0 = arg0;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SpringboardClient.prototype.recv_getPost = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Springboard_getPost_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPost failed: unknown result');
};
SpringboardClient.prototype.getPosts = function(arg0, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPosts(arg0);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPosts(arg0);
  }
};

SpringboardClient.prototype.send_getPosts = function(arg0) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPosts', Thrift.MessageType.CALL, this.seqid());
  var args = new Springboard_getPosts_args();
  args.arg0 = arg0;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SpringboardClient.prototype.recv_getPosts = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Springboard_getPosts_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPosts failed: unknown result');
};
SpringboardClient.prototype.getUser = function(arg0, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUser(arg0);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUser(arg0);
  }
};

SpringboardClient.prototype.send_getUser = function(arg0) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUser', Thrift.MessageType.CALL, this.seqid());
  var args = new Springboard_getUser_args();
  args.arg0 = arg0;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SpringboardClient.prototype.recv_getUser = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Springboard_getUser_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUser failed: unknown result');
};
SpringboardClient.prototype.getUserByUsernameAndPassword = function(arg0, arg1, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUserByUsernameAndPassword(arg0, arg1);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUserByUsernameAndPassword(arg0, arg1);
  }
};

SpringboardClient.prototype.send_getUserByUsernameAndPassword = function(arg0, arg1) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUserByUsernameAndPassword', Thrift.MessageType.CALL, this.seqid());
  var args = new Springboard_getUserByUsernameAndPassword_args();
  args.arg0 = arg0;
  args.arg1 = arg1;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SpringboardClient.prototype.recv_getUserByUsernameAndPassword = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Springboard_getUserByUsernameAndPassword_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUserByUsernameAndPassword failed: unknown result');
};
SpringboardClient.prototype.getUsers = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUsers();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUsers();
  }
};

SpringboardClient.prototype.send_getUsers = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUsers', Thrift.MessageType.CALL, this.seqid());
  var args = new Springboard_getUsers_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SpringboardClient.prototype.recv_getUsers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Springboard_getUsers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUsers failed: unknown result');
};
SpringboardClient.prototype.updateComment = function(arg0, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateComment(arg0);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateComment(arg0);
  }
};

SpringboardClient.prototype.send_updateComment = function(arg0) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateComment', Thrift.MessageType.CALL, this.seqid());
  var args = new Springboard_updateComment_args();
  args.arg0 = arg0;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SpringboardClient.prototype.recv_updateComment = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Springboard_updateComment_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateComment failed: unknown result');
};
SpringboardClient.prototype.updateForum = function(arg0, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateForum(arg0);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateForum(arg0);
  }
};

SpringboardClient.prototype.send_updateForum = function(arg0) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateForum', Thrift.MessageType.CALL, this.seqid());
  var args = new Springboard_updateForum_args();
  args.arg0 = arg0;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SpringboardClient.prototype.recv_updateForum = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Springboard_updateForum_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateForum failed: unknown result');
};
SpringboardClient.prototype.updatePost = function(arg0, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updatePost(arg0);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updatePost(arg0);
  }
};

SpringboardClient.prototype.send_updatePost = function(arg0) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updatePost', Thrift.MessageType.CALL, this.seqid());
  var args = new Springboard_updatePost_args();
  args.arg0 = arg0;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SpringboardClient.prototype.recv_updatePost = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Springboard_updatePost_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updatePost failed: unknown result');
};
SpringboardClient.prototype.updateUser = function(arg0, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateUser(arg0);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateUser(arg0);
  }
};

SpringboardClient.prototype.send_updateUser = function(arg0) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateUser', Thrift.MessageType.CALL, this.seqid());
  var args = new Springboard_updateUser_args();
  args.arg0 = arg0;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SpringboardClient.prototype.recv_updateUser = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Springboard_updateUser_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateUser failed: unknown result');
};
SpringboardProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
SpringboardProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

SpringboardProcessor.prototype.process_createComment = function(seqid, input, output) {
  var args = new Springboard_createComment_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createComment.length === 1) {
    Q.fcall(this._handler.createComment, args.arg0)
      .then(function(result) {
        var result = new Springboard_createComment_result({success: result});
        output.writeMessageBegin("createComment", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createComment", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createComment(args.arg0, function (err, result) {
      if (err == null) {
        var result = new Springboard_createComment_result((err != null ? err : {success: result}));
        output.writeMessageBegin("createComment", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createComment", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SpringboardProcessor.prototype.process_createForum = function(seqid, input, output) {
  var args = new Springboard_createForum_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createForum.length === 1) {
    Q.fcall(this._handler.createForum, args.arg0)
      .then(function(result) {
        var result = new Springboard_createForum_result({success: result});
        output.writeMessageBegin("createForum", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createForum", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createForum(args.arg0, function (err, result) {
      if (err == null) {
        var result = new Springboard_createForum_result((err != null ? err : {success: result}));
        output.writeMessageBegin("createForum", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createForum", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SpringboardProcessor.prototype.process_createPost = function(seqid, input, output) {
  var args = new Springboard_createPost_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createPost.length === 1) {
    Q.fcall(this._handler.createPost, args.arg0)
      .then(function(result) {
        var result = new Springboard_createPost_result({success: result});
        output.writeMessageBegin("createPost", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createPost", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createPost(args.arg0, function (err, result) {
      if (err == null) {
        var result = new Springboard_createPost_result((err != null ? err : {success: result}));
        output.writeMessageBegin("createPost", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createPost", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SpringboardProcessor.prototype.process_createUser = function(seqid, input, output) {
  var args = new Springboard_createUser_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createUser.length === 1) {
    Q.fcall(this._handler.createUser, args.arg0)
      .then(function(result) {
        var result = new Springboard_createUser_result({success: result});
        output.writeMessageBegin("createUser", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createUser", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createUser(args.arg0, function (err, result) {
      if (err == null) {
        var result = new Springboard_createUser_result((err != null ? err : {success: result}));
        output.writeMessageBegin("createUser", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createUser", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SpringboardProcessor.prototype.process_deleteComment = function(seqid, input, output) {
  var args = new Springboard_deleteComment_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteComment.length === 1) {
    Q.fcall(this._handler.deleteComment, args.arg0)
      .then(function(result) {
        var result = new Springboard_deleteComment_result({success: result});
        output.writeMessageBegin("deleteComment", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteComment", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteComment(args.arg0, function (err, result) {
      if (err == null) {
        var result = new Springboard_deleteComment_result((err != null ? err : {success: result}));
        output.writeMessageBegin("deleteComment", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteComment", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SpringboardProcessor.prototype.process_deleteForum = function(seqid, input, output) {
  var args = new Springboard_deleteForum_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteForum.length === 1) {
    Q.fcall(this._handler.deleteForum, args.arg0)
      .then(function(result) {
        var result = new Springboard_deleteForum_result({success: result});
        output.writeMessageBegin("deleteForum", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteForum", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteForum(args.arg0, function (err, result) {
      if (err == null) {
        var result = new Springboard_deleteForum_result((err != null ? err : {success: result}));
        output.writeMessageBegin("deleteForum", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteForum", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SpringboardProcessor.prototype.process_deletePost = function(seqid, input, output) {
  var args = new Springboard_deletePost_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deletePost.length === 1) {
    Q.fcall(this._handler.deletePost, args.arg0)
      .then(function(result) {
        var result = new Springboard_deletePost_result({success: result});
        output.writeMessageBegin("deletePost", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deletePost", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deletePost(args.arg0, function (err, result) {
      if (err == null) {
        var result = new Springboard_deletePost_result((err != null ? err : {success: result}));
        output.writeMessageBegin("deletePost", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deletePost", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SpringboardProcessor.prototype.process_deleteUser = function(seqid, input, output) {
  var args = new Springboard_deleteUser_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteUser.length === 1) {
    Q.fcall(this._handler.deleteUser, args.arg0)
      .then(function(result) {
        var result = new Springboard_deleteUser_result({success: result});
        output.writeMessageBegin("deleteUser", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteUser", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteUser(args.arg0, function (err, result) {
      if (err == null) {
        var result = new Springboard_deleteUser_result((err != null ? err : {success: result}));
        output.writeMessageBegin("deleteUser", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteUser", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SpringboardProcessor.prototype.process_getComment = function(seqid, input, output) {
  var args = new Springboard_getComment_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getComment.length === 1) {
    Q.fcall(this._handler.getComment, args.arg0)
      .then(function(result) {
        var result = new Springboard_getComment_result({success: result});
        output.writeMessageBegin("getComment", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getComment", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getComment(args.arg0, function (err, result) {
      if (err == null) {
        var result = new Springboard_getComment_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getComment", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getComment", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SpringboardProcessor.prototype.process_getComments = function(seqid, input, output) {
  var args = new Springboard_getComments_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getComments.length === 1) {
    Q.fcall(this._handler.getComments, args.arg0)
      .then(function(result) {
        var result = new Springboard_getComments_result({success: result});
        output.writeMessageBegin("getComments", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getComments", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getComments(args.arg0, function (err, result) {
      if (err == null) {
        var result = new Springboard_getComments_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getComments", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getComments", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SpringboardProcessor.prototype.process_getForum = function(seqid, input, output) {
  var args = new Springboard_getForum_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getForum.length === 1) {
    Q.fcall(this._handler.getForum, args.arg0)
      .then(function(result) {
        var result = new Springboard_getForum_result({success: result});
        output.writeMessageBegin("getForum", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getForum", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getForum(args.arg0, function (err, result) {
      if (err == null) {
        var result = new Springboard_getForum_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getForum", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getForum", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SpringboardProcessor.prototype.process_getForums = function(seqid, input, output) {
  var args = new Springboard_getForums_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getForums.length === 0) {
    Q.fcall(this._handler.getForums)
      .then(function(result) {
        var result = new Springboard_getForums_result({success: result});
        output.writeMessageBegin("getForums", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getForums", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getForums(function (err, result) {
      if (err == null) {
        var result = new Springboard_getForums_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getForums", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getForums", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SpringboardProcessor.prototype.process_getPost = function(seqid, input, output) {
  var args = new Springboard_getPost_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPost.length === 1) {
    Q.fcall(this._handler.getPost, args.arg0)
      .then(function(result) {
        var result = new Springboard_getPost_result({success: result});
        output.writeMessageBegin("getPost", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPost", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPost(args.arg0, function (err, result) {
      if (err == null) {
        var result = new Springboard_getPost_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getPost", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPost", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SpringboardProcessor.prototype.process_getPosts = function(seqid, input, output) {
  var args = new Springboard_getPosts_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPosts.length === 1) {
    Q.fcall(this._handler.getPosts, args.arg0)
      .then(function(result) {
        var result = new Springboard_getPosts_result({success: result});
        output.writeMessageBegin("getPosts", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPosts", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPosts(args.arg0, function (err, result) {
      if (err == null) {
        var result = new Springboard_getPosts_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getPosts", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPosts", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SpringboardProcessor.prototype.process_getUser = function(seqid, input, output) {
  var args = new Springboard_getUser_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUser.length === 1) {
    Q.fcall(this._handler.getUser, args.arg0)
      .then(function(result) {
        var result = new Springboard_getUser_result({success: result});
        output.writeMessageBegin("getUser", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getUser", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUser(args.arg0, function (err, result) {
      if (err == null) {
        var result = new Springboard_getUser_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getUser", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getUser", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SpringboardProcessor.prototype.process_getUserByUsernameAndPassword = function(seqid, input, output) {
  var args = new Springboard_getUserByUsernameAndPassword_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUserByUsernameAndPassword.length === 2) {
    Q.fcall(this._handler.getUserByUsernameAndPassword, args.arg0, args.arg1)
      .then(function(result) {
        var result = new Springboard_getUserByUsernameAndPassword_result({success: result});
        output.writeMessageBegin("getUserByUsernameAndPassword", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getUserByUsernameAndPassword", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUserByUsernameAndPassword(args.arg0, args.arg1, function (err, result) {
      if (err == null) {
        var result = new Springboard_getUserByUsernameAndPassword_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getUserByUsernameAndPassword", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getUserByUsernameAndPassword", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SpringboardProcessor.prototype.process_getUsers = function(seqid, input, output) {
  var args = new Springboard_getUsers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUsers.length === 0) {
    Q.fcall(this._handler.getUsers)
      .then(function(result) {
        var result = new Springboard_getUsers_result({success: result});
        output.writeMessageBegin("getUsers", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getUsers", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUsers(function (err, result) {
      if (err == null) {
        var result = new Springboard_getUsers_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getUsers", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getUsers", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SpringboardProcessor.prototype.process_updateComment = function(seqid, input, output) {
  var args = new Springboard_updateComment_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateComment.length === 1) {
    Q.fcall(this._handler.updateComment, args.arg0)
      .then(function(result) {
        var result = new Springboard_updateComment_result({success: result});
        output.writeMessageBegin("updateComment", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateComment", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateComment(args.arg0, function (err, result) {
      if (err == null) {
        var result = new Springboard_updateComment_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateComment", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateComment", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SpringboardProcessor.prototype.process_updateForum = function(seqid, input, output) {
  var args = new Springboard_updateForum_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateForum.length === 1) {
    Q.fcall(this._handler.updateForum, args.arg0)
      .then(function(result) {
        var result = new Springboard_updateForum_result({success: result});
        output.writeMessageBegin("updateForum", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateForum", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateForum(args.arg0, function (err, result) {
      if (err == null) {
        var result = new Springboard_updateForum_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateForum", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateForum", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SpringboardProcessor.prototype.process_updatePost = function(seqid, input, output) {
  var args = new Springboard_updatePost_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updatePost.length === 1) {
    Q.fcall(this._handler.updatePost, args.arg0)
      .then(function(result) {
        var result = new Springboard_updatePost_result({success: result});
        output.writeMessageBegin("updatePost", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updatePost", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updatePost(args.arg0, function (err, result) {
      if (err == null) {
        var result = new Springboard_updatePost_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updatePost", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updatePost", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SpringboardProcessor.prototype.process_updateUser = function(seqid, input, output) {
  var args = new Springboard_updateUser_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateUser.length === 1) {
    Q.fcall(this._handler.updateUser, args.arg0)
      .then(function(result) {
        var result = new Springboard_updateUser_result({success: result});
        output.writeMessageBegin("updateUser", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateUser", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateUser(args.arg0, function (err, result) {
      if (err == null) {
        var result = new Springboard_updateUser_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateUser", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateUser", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

